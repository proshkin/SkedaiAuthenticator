name: Build and Release

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        platform: [mac, win]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install Dependencies
      run: npm install

    - name: Install jq
      if: runner.os == 'Windows'
      run: choco install jq

    - name: Read Config File
      id: read_config
      shell: bash
      run: |
        echo "Reading config.txt"
        CONFIG_CONTENT=$(cat config.txt)
        IS_RELEASE=$(echo "$CONFIG_CONTENT" | jq -r '.is_release')
        IS_PRERELEASE=$(echo "$CONFIG_CONTENT" | jq -r '.is_prerelease')
        echo "::set-output name=is_release::$IS_RELEASE"
        echo "::set-output name=is_prerelease::$IS_PRERELEASE"

    - name: Calculate Version
      id: calc_version
      shell: bash
      run: |
        RELEASE_COUNT=$(git tag --list | wc -l | xargs)
        COMMIT_COUNT=$(git rev-list --count HEAD)
        VERSION="0.${RELEASE_COUNT}.${COMMIT_COUNT}"
        echo "Calculated version: $VERSION"
        echo "::set-output name=version::$VERSION"

    - name: Build Application
      env:
        BUILD_VERSION: ${{ steps.calc_version.outputs.version }}
      run: |
        echo "Building for platform: ${{ matrix.platform }}"
        npm run build -- --${{ matrix.platform }}

    - name: Rename Executable
      run: |
        if [ "${{ matrix.platform }}" == "win" ]; then
          EXT="exe"
          FILE=$(find dist -name "*.exe" | head -n 1)
        else
          EXT="zip"
          FILE=$(find dist -name "*.zip" | head -n 1)
        fi
        FILE_NAME="authenticator_${{ matrix.platform }}_${{ steps.calc_version.outputs.version }}.$EXT"
        mv "$FILE" "dist/$FILE_NAME"

    - name: Upload Artifact
      if: steps.read_config.outputs.is_release == 'false'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.calc_version.outputs.version }}
        path: dist/*

    - name: Create Release
      if: steps.read_config.outputs.is_release == 'true'
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: v${{ steps.calc_version.outputs.version }}
        release_name: Release ${{ steps.calc_version.outputs.version }}
        prerelease: ${{ steps.read_config.outputs.is_prerelease }}
        draft: false

    - name: Upload Release Asset
      if: steps.read_config.outputs.is_release == 'true'
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/*
        asset_name: authenticator_${{ matrix.platform }}_${{ steps.calc_version.outputs.version }}.${{ matrix.platform == 'win' && 'exe' || 'zip' }}
        asset_content_type: application/octet-stream
